package calulations

import (
	coinapi "github.com/omaribrown/coinalert/data"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestCalcSma(t *testing.T) {
	t.Run("Should find sma", func(t *testing.T) {
		//sampleLength := len(sampleData)
		sampleData := []coinapi.LatestOhlcv{
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
		}

		testResult := calcSma(sampleData, 20)

		assert.Equal(t, 50.0, testResult)
	})
}

func TestStandardDev(t *testing.T) {
	t.Run("Should find standard deviation", func(t *testing.T) {
		sampleData := []coinapi.LatestOhlcv{
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
			{
				PriceHigh:  100,
				PriceLow:   20,
				PriceClose: 50,
			},
		}

		result := standardDev(sampleData, 20)

		assert.Equal(t, 0.0, result)
	})
}

func TestAdd(t *testing.T) {
	t.Run("Should add upper,lower to candles array", func(t *testing.T) {
		sampleCandles := []coinapi.LatestOhlcv{
			{"2022-01-14T12:00:00.0000000Z", "2022-01-14T12:01:00.0000000Z", "2022-01-14T12:00:00.0849950Z", 0, 42027.95, 42029.92, 41981.6, 41999.1, 19.69203505, 437, 0, 0},
			{"2022-01-14T12:01:00.0000000Z", "2022-01-14T12:02:00.0000000Z", "2022-01-14T12:01:00.1423980Z", 0, 41999.95, 42108.7, 41997.5, 42070.02, 19.78920186, 499, 0, 0},
			{"2022-01-14T12:02:00.0000000Z", "2022-01-14T12:03:00.0000000Z", "2022-01-14T12:02:00.2340620Z", 0, 42070.01, 42095.55, 42032.95, 42036.61, 12.80829069, 382, 0, 0},
			{"2022-01-14T12:03:00.0000000Z", "2022-01-14T12:04:00.0000000Z", "2022-01-14T12:03:00.0212300Z", 0, 42036.62, 42040.33, 41980.01, 41980.01, 23.41631377, 427, 0, 0},
			{"2022-01-14T12:04:00.0000000Z", "2022-01-14T12:05:00.0000000Z", "2022-01-14T12:04:00.3162010Z", 0, 41983.47, 41995.2, 41961.61, 41973.35, 6.06234344, 339, 0, 0},
			{"2022-01-14T12:05:00.0000000Z", "2022-01-14T12:06:00.0000000Z", "2022-01-14T12:05:00.0994180Z", 0, 41973.36, 41996.46, 41965.27, 41980.83, 9.41763461, 266, 0, 0},
			{"2022-01-14T12:06:00.0000000Z", "2022-01-14T12:07:00.0000000Z", "2022-01-14T12:06:00.1573750Z", 0, 41981.1, 41992.36, 41918.07, 41951.68, 48.83579737, 381, 0, 0},
			{"2022-01-14T12:07:00.0000000Z", "2022-01-14T12:08:00.0000000Z", "2022-01-14T12:07:00.5310260Z", 0, 41953.97, 41965.84, 41927.39, 41933.14, 19.07367508, 280, 0, 0},
			{"2022-01-14T12:08:00.0000000Z", "2022-01-14T12:09:00.0000000Z", "2022-01-14T12:08:00.5487290Z", 0, 41929.43, 41940.71, 41909.55, 41910.6, 25.1672658, 328, 0, 0},
			{"2022-01-14T12:09:00.0000000Z", "2022-01-14T12:10:00.0000000Z", "2022-01-14T12:09:01.1225650Z", 0, 41910.59, 41934.5, 41866.07, 41895.61, 36.37391296, 460, 0, 0},
			{"2022-01-14T12:10:00.0000000Z", "2022-01-14T12:11:00.0000000Z", "2022-01-14T12:10:00.0216600Z", 0, 41894.64, 41951.51, 41887.96, 41920.6, 26.17623433, 314, 0, 0},
			{"2022-01-14T12:11:00.0000000Z", "2022-01-14T12:12:00.0000000Z", "2022-01-14T12:11:00.1263620Z", 0, 41910.03, 41927.94, 41896.99, 41911.05, 10.31894624, 194, 0, 0},
			{"2022-01-14T12:12:00.0000000Z", "2022-01-14T12:13:00.0000000Z", "2022-01-14T12:12:00.2369630Z", 0, 41911.05, 41925.9, 41883.48, 41898.54, 29.72007544, 412, 0, 0},
			{"2022-01-14T12:13:00.0000000Z", "2022-01-14T12:14:00.0000000Z", "2022-01-14T12:13:00.2501300Z", 0, 41898.49, 41908.5, 41860.34, 41861.5, 21.50392692, 315, 0, 0},
			{"2022-01-14T12:14:00.0000000Z", "2022-01-14T12:15:00.0000000Z", "2022-01-14T12:14:00.0847770Z", 0, 41860.34, 41989.5, 41752, 41943.3, 168.09079987, 1582, 0, 0},
			{"2022-01-14T12:15:00.0000000Z", "2022-01-14T12:16:00.0000000Z", "2022-01-14T12:15:00.1760000Z", 0, 41954.9, 42035.02, 41943.3, 41998.59, 22.19655209, 523, 0, 0},
			{"2022-01-14T12:16:00.0000000Z", "2022-01-14T12:17:00.0000000Z", "2022-01-14T12:16:00.0344620Z", 0, 41998.51, 42047.1, 41977.02, 42024.23, 20.3567512, 335, 0, 0},
			{"2022-01-14T12:17:00.0000000Z", "2022-01-14T12:18:00.0000000Z", "2022-01-14T12:17:00.7104650Z", 0, 42025.64, 42031.9, 41980.67, 41996.82, 4.96657703, 271, 0, 0},
			{"2022-01-14T12:18:00.0000000Z", "2022-01-14T12:19:00.0000000Z", "2022-01-14T12:18:00.1158240Z", 0, 41996.82, 42080.65, 41996.01, 42046.62, 21.91022379, 467, 0, 0},
			{"2022-01-14T12:19:00.0000000Z", "2022-01-14T12:20:00.0000000Z", "2022-01-14T12:19:00.2641480Z", 0, 42046.61, 42096.5, 42040.33, 42073.91, 7.52585387, 337, 0, 0},
			{"2022-01-14T12:20:00.0000000Z", "2022-01-14T12:21:00.0000000Z", "2022-01-14T12:20:00.3140000Z", 0, 42071.1, 42088.34, 42043.3, 42088.22, 10.28296556, 312, 0, 0},
			{"2022-01-14T12:21:00.0000000Z", "2022-01-14T12:22:00.0000000Z", "2022-01-14T12:21:00.0829830Z", 0, 42083.65, 42103.5, 42008.38, 42046.56, 57.34910235, 534, 0, 0},
			{"2022-01-14T12:22:00.0000000Z", "2022-01-14T12:23:00.0000000Z", "2022-01-14T12:22:00.1813150Z", 0, 42045.79, 42101.84, 42040.48, 42095.59, 6.77108108, 308, 0, 0},
			{"2022-01-14T12:23:00.0000000Z", "2022-01-14T12:24:00.0000000Z", "2022-01-14T12:23:00.3801120Z", 0, 42098.99, 42168, 42081.83, 42119.53, 18.85148267, 457, 0, 0},
			{"2022-01-14T12:24:00.0000000Z", "2022-01-14T12:25:00.0000000Z", "2022-01-14T12:24:00.4969950Z", 0, 42125.14, 42176.9, 42120.75, 42146.05, 8.51605516, 385, 0, 0},
			{"2022-01-14T12:25:00.0000000Z", "2022-01-14T12:26:00.0000000Z", "2022-01-14T12:25:00.3698840Z", 0, 42146.06, 42146.06, 42101.64, 42119.89, 19.37864766, 381, 0, 0},
			{"2022-01-14T12:26:00.0000000Z", "2022-01-14T12:27:00.0000000Z", "2022-01-14T12:26:00.0320000Z", 0, 42116, 42134.81, 42086.55, 42091.41, 7.48229508, 274, 0, 0},
			{"2022-01-14T12:27:00.0000000Z", "2022-01-14T12:28:00.0000000Z", "2022-01-14T12:27:00.0918150Z", 0, 42091.41, 42107.04, 42058.51, 42067.07, 21.44749783, 366, 0, 0},
			{"2022-01-14T12:28:00.0000000Z", "2022-01-14T12:29:00.0000000Z", "2022-01-14T12:28:00.0253830Z", 0, 42067.07, 42078.88, 42027.27, 42055.02, 6.28774961, 320, 0, 0},
			{"2022-01-14T12:29:00.0000000Z", "2022-01-14T12:30:00.0000000Z", "2022-01-14T12:29:00.6440640Z", 0, 42059.7, 42066.21, 42021.43, 42021.43, 12.52657537, 320, 0, 0},
			{"2022-01-14T12:30:00.0000000Z", "2022-01-14T12:31:00.0000000Z", "2022-01-14T12:30:00.1011080Z", 0, 42025.75, 42091, 42018.5, 42083.81, 77.93637312, 597, 0, 0},
			{"2022-01-14T12:31:00.0000000Z", "2022-01-14T12:32:00.0000000Z", "2022-01-14T12:31:01.0571540Z", 0, 42083.81, 42126.65, 42076.19, 42103, 12.84666418, 331, 0, 0},
			{"2022-01-14T12:32:00.0000000Z", "2022-01-14T12:33:00.0000000Z", "2022-01-14T12:32:00.2639400Z", 0, 42101.35, 42132.15, 42085.3, 42113.19, 8.28816456, 314, 0, 0},
			{"2022-01-14T12:33:00.0000000Z", "2022-01-14T12:34:00.0000000Z", "2022-01-14T12:33:00.4656030Z", 0, 42113.73, 42138.26, 42100, 42108.5, 13.27961514, 313, 0, 0},
			{"2022-01-14T12:34:00.0000000Z", "2022-01-14T12:35:00.0000000Z", "2022-01-14T12:34:00.5697930Z", 0, 42108.46, 42185.8, 42105.23, 42137.17, 49.3278531, 504, 0, 0},
			{"2022-01-14T12:35:00.0000000Z", "2022-01-14T12:36:00.0000000Z", "2022-01-14T12:35:00.3911380Z", 0, 42137.16, 42170.75, 42118.46, 42156.94, 9.51892, 380, 0, 0},
			{"2022-01-14T12:36:00.0000000Z", "2022-01-14T12:37:00.0000000Z", "2022-01-14T12:36:00.0136290Z", 0, 42154.44, 42167.45, 42123.58, 42152.59, 24.2435188, 338, 0, 0},
			//{2022-01-14T12:37:00.0000000Z 2022-01-14T12:38:00.0000000Z 2022-01-14T12:37:00.1451600Z 0 42152.59 42175 42130.1 42154.35 21.1076683 315}{2022-01-14T12:38:00.0000000Z 2022-01-14T12:39:00.0000000Z 2022-01-14T12:38:00.4603950Z 0 42154.35 42179.36 42119.91 42119.91 20.95324804 422}{2022-01-14T12:39:00.0000000Z 2022-01-14T12:40:00.0000000Z 2022-01-14T12:39:00.1375550Z 0 42119.91 42164.5 42119.9 42149.92 11.75847289 334}{2022-01-14T12:40:00.0000000Z 2022-01-14T12:41:00.0000000Z 2022-01-14T12:40:00.3942000Z 0 42149.92 42156.52 42097 42146.2 14.29278878 388}{2022-01-14T12:41:00.0000000Z 2022-01-14T12:42:00.0000000Z 2022-01-14T12:41:00.2550760Z 0 42146.21 42160.54 42089.63 42091.69 17.68512345 382}{2022-01-14T12:42:00.0000000Z 2022-01-14T12:43:00.0000000Z 2022-01-14T12:42:00.1304060Z 0 42091.7 42113.64 42074.81 42093.5 9.22238521 312}{2022-01-14T12:43:00.0000000Z 2022-01-14T12:44:00.0000000Z 2022-01-14T12:43:01.1843260Z 0 42111.71 42132.23 42090.56 42098.07 8.20316637 282}{2022-01-14T12:44:00.0000000Z 2022-01-14T12:45:00.0000000Z 2022-01-14T12:44:00.1527010Z 0 42098.07 42134.63 42091.7 42122.82 21.75967289 319}{2022-01-14T12:45:00.0000000Z 2022-01-14T12:46:00.0000000Z 2022-01-14T12:45:00.3125000Z 0 42122.83 42162.45 42122.83 42147.65 10.96357943 319}{2022-01-14T12:46:00.0000000Z 2022-01-14T12:47:00.0000000Z 2022-01-14T12:46:00.2715090Z 0 42147.71 42182.16 42147.46 42170.27 5.15840801 224}{2022-01-14T12:47:00.0000000Z 2022-01-14T12:48:00.0000000Z 2022-01-14T12:47:00.0355100Z 0 42166.7 42170 42128.51 42134.91 8.68708727 288}{2022-01-14T12:48:00.0000000Z 2022-01-14T12:49:00.0000000Z 2022-01-14T12:48:00.1319630Z 0 42137.46 42217 42129.34 42198.3 27.20799299 347}{2022-01-14T12:49:00.0000000Z 2022-01-14T12:50:00.0000000Z 2022-01-14T12:49:00.0418280Z 0 42208.21 42218.59 42184.11 42217.7 14.6442117 443}{2022-01-14T12:50:00.0000000Z 2022-01-14T12:51:00.0000000Z 2022-01-14T12:50:00.4785010Z 0 42217.7 42232.57 42184.2 42231.52 22.12234359 467}{2022-01-14T12:51:00.0000000Z 2022-01-14T12:52:00.0000000Z 2022-01-14T12:51:00.4207800Z 0 42221.57 42243.66 42177.05 42214.14 20.16455352 413}{2022-01-14T12:52:00.0000000Z 2022-01-14T12:53:00.0000000Z 2022-01-14T12:52:01.5894500Z 0 42216.47 42247 42208.8 42230.63 29.67521356 423}{2022-01-14T12:53:00.0000000Z 2022-01-14T12:54:00.0000000Z 2022-01-14T12:53:00.0980000Z 0 42222 42260 42210.04 42224.15 26.67887754 404}{2022-01-14T12:54:00.0000000Z 2022-01-14T12:55:00.0000000Z 2022-01-14T12:54:00.0640000Z 0 42228 42243 42206.34 42226.7 7.00295372 229}{2022-01-14T12:55:00.0000000Z 2022-01-14T12:56:00.0000000Z 2022-01-14T12:55:00.0513270Z 0 42215.65 42226.6 42165.61 42167.35 20.61056218 374}{2022-01-14T12:56:00.0000000Z 2022-01-14T12:57:00.0000000Z 2022-01-14T12:56:00.2769640Z 0 42167.36 42216.61 42137.64 42138.42 31.95400716 542}{2022-01-14T12:57:00.0000000Z 2022-01-14T12:58:00.0000000Z 2022-01-14T12:57:00.7387480Z 0 42138.42 42176 42134.17 42144.43 12.38061085 251}{2022-01-14T12:58:00.0000000Z 2022-01-14T12:59:00.0000000Z 2022-01-14T12:58:00.4600000Z 0 42149.5 42163.5 42077.85 42081.34 40.11832882 511}{2022-01-14T12:59:00.0000000Z 2022-01-14T13:00:00.0000000Z 2022-01-14T12:59:00.0580000Z 0 42088.4 42109.1 42044.51 42070.64 33.53206023 430}
		}
		bolBandCalculator := New(Props{size: 20})
		bolBandCalculator.add(sampleCandles[0])
		bolBandCalculator.add(sampleCandles[1])
		bolBandCalculator.add(sampleCandles[2])
		bolBandCalculator.add(sampleCandles[3])
		bolBandCalculator.add(sampleCandles[4])
		bolBandCalculator.add(sampleCandles[5])
		bolBandCalculator.add(sampleCandles[6])
		bolBandCalculator.add(sampleCandles[7])
		bolBandCalculator.add(sampleCandles[8])
		bolBandCalculator.add(sampleCandles[9])
		bolBandCalculator.add(sampleCandles[10])
		bolBandCalculator.add(sampleCandles[11])
		bolBandCalculator.add(sampleCandles[12])
		bolBandCalculator.add(sampleCandles[13])
		bolBandCalculator.add(sampleCandles[14])
		bolBandCalculator.add(sampleCandles[15])
		bolBandCalculator.add(sampleCandles[16])
		bolBandCalculator.add(sampleCandles[17])
		bolBandCalculator.add(sampleCandles[18])
		bolBandCalculator.add(sampleCandles[19])
		bolBandCalculator.add(sampleCandles[20])
		bolBandCalculator.add(sampleCandles[21])
		bolBandCalculator.add(sampleCandles[22])
		bolBandCalculator.add(sampleCandles[23])
		bolBandCalculator.add(sampleCandles[24])
		bolBandCalculator.add(sampleCandles[25])
		bolBandCalculator.add(sampleCandles[26])
		bolBandCalculator.add(sampleCandles[27])
		bolBandCalculator.add(sampleCandles[28])
		bolBandCalculator.add(sampleCandles[29])
		bolBandCalculator.add(sampleCandles[30])

		testResult := bolBandCalculator.bollingerBandCandle

		assert.Equal(t, 42187.778494266146, testResult.BollingerBandUpper)
		assert.Equal(t, 41881.13550573387, testResult.BollingerBandLower)
	})
}
